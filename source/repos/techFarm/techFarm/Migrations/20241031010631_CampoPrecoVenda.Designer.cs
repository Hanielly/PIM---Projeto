// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using techFarm.Data;

#nullable disable

namespace techFarm.Migrations
{
    [DbContext(typeof(TechFarmContext))]
    [Migration("20241031010631_CampoPrecoVenda")]
    partial class CampoPrecoVenda
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("techFarm.Models.Fornecedor", b =>
                {
                    b.Property<int>("ID_Fornecedores")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ID_Fornecedores");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("techFarm.Models.Funcionario", b =>
                {
                    b.Property<int>("ID_Funcionarios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Funcao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Salario")
                        .HasColumnType("TEXT");

                    b.HasKey("ID_Funcionarios");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("techFarm.Models.LoteGrao", b =>
                {
                    b.Property<int>("ID_LotesGraos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ID_Sementes")
                        .HasColumnType("INTEGER");

                    b.Property<double>("QuantidadeKG")
                        .HasColumnType("REAL");

                    b.Property<string>("TipoDeGrao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID_LotesGraos");

                    b.HasIndex("ID_Sementes");

                    b.ToTable("LotesGraos");
                });

            modelBuilder.Entity("techFarm.Models.Semente", b =>
                {
                    b.Property<int>("ID_Sementes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ID_Fornecedores")
                        .HasColumnType("INTEGER");

                    b.Property<double>("KG")
                        .HasColumnType("REAL");

                    b.Property<string>("TipoDeGrao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID_Sementes");

                    b.HasIndex("ID_Fornecedores");

                    b.ToTable("Sementes");
                });

            modelBuilder.Entity("techFarm.Models.Venda", b =>
                {
                    b.Property<int>("ID_Vendas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataDaVenda")
                        .HasColumnType("TEXT");

                    b.Property<int>("ID_Funcionarios")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ID_LotesGraos")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Preco")
                        .HasColumnType("TEXT");

                    b.Property<double>("QuantidadeKGVendida")
                        .HasColumnType("REAL");

                    b.HasKey("ID_Vendas");

                    b.HasIndex("ID_Funcionarios");

                    b.HasIndex("ID_LotesGraos");

                    b.ToTable("Vendas");
                });

            modelBuilder.Entity("techFarm.Models.LoteGrao", b =>
                {
                    b.HasOne("techFarm.Models.Semente", "Semente")
                        .WithMany("LotesGraos")
                        .HasForeignKey("ID_Sementes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semente");
                });

            modelBuilder.Entity("techFarm.Models.Semente", b =>
                {
                    b.HasOne("techFarm.Models.Fornecedor", "Fornecedor")
                        .WithMany("Sementes")
                        .HasForeignKey("ID_Fornecedores")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("techFarm.Models.Venda", b =>
                {
                    b.HasOne("techFarm.Models.Funcionario", "Funcionario")
                        .WithMany("Vendas")
                        .HasForeignKey("ID_Funcionarios")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("techFarm.Models.LoteGrao", "LoteGrao")
                        .WithMany("Vendas")
                        .HasForeignKey("ID_LotesGraos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");

                    b.Navigation("LoteGrao");
                });

            modelBuilder.Entity("techFarm.Models.Fornecedor", b =>
                {
                    b.Navigation("Sementes");
                });

            modelBuilder.Entity("techFarm.Models.Funcionario", b =>
                {
                    b.Navigation("Vendas");
                });

            modelBuilder.Entity("techFarm.Models.LoteGrao", b =>
                {
                    b.Navigation("Vendas");
                });

            modelBuilder.Entity("techFarm.Models.Semente", b =>
                {
                    b.Navigation("LotesGraos");
                });
#pragma warning restore 612, 618
        }
    }
}
